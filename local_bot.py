import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
from urllib.parse import urlparse, parse_qs
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8222846517:AAEVXzNlrt14BWIK2QrA38JE72doZ2Fy3YE"  # –í–∞—à —Ç–æ–∫–µ–Ω
LOCAL_API_URL = "http://localhost:8000/api"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è initData
user_init_data = {}


def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ WebApp –∫–Ω–æ–ø–∫–∏"""
    keyboard = [
        [KeyboardButton("üîê –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç!")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n"
        "‚Ä¢ üîê –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n"
        "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ üëã –ü—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è!"
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

    await send_to_local_api({
        "action": "start_command",
        "user_id": update.effective_user.id,
        "username": update.effective_user.username,
        "first_name": update.effective_user.first_name,
        "chat_id": update.effective_chat.id
    })


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message = update.message
    text = message.text

    print(f"üì® {user.first_name}: {text}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üîê –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é":
        await handle_auth_simulation(update, user)

    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        await handle_show_data(update, user)

    elif text == "üëã –ü—Ä–∏–≤–µ—Ç!":
        await handle_hello(update, user)

    else:
        await handle_regular_message(update, user, text)


# async def handle_auth_simulation(update: Update, user):
#     """–ò–º–∏—Ç–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
#     # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é initData
#     simulated_init_data = {
#         "user": {
#             "id": user.id,
#             "first_name": user.first_name,
#             "last_name": user.last_name,
#             "username": user.username,
#             "language_code": user.language_code,
#             "is_premium": getattr(user, 'is_premium', False)
#         },
#         "auth_date": update.message.date.timestamp(),
#         "hash": f"simulated_hash_{user.id}_{update.message.date.timestamp()}"
#     }
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
#     user_init_data[str(user.id)] = {
#         "simulated_data": simulated_init_data,
#         "timestamp": update.message.date.isoformat()
#     }
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
#     await send_to_local_api({
#         "action": "auth_simulation",
#         "user_id": user.id,
#         "init_data": simulated_init_data,
#         "chat_id": update.effective_chat.id
#     })
#
#     await update.message.reply_text(
#         "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞!\n"
#         "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ API.",
#         reply_markup=get_main_keyboard()
#     )
async def handle_auth_simulation(update: Update, user):
    """–ò–º–∏—Ç–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é initData
    simulated_init_data = {
        "user": {
            "id": user.id,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
            "language_code": user.language_code,
            "is_premium": getattr(user, 'is_premium', False),
            "is_bot": user.is_bot
        },
        "auth_date": int(update.message.date.timestamp()),
        "hash": f"simulated_hash_{user.id}_{int(update.message.date.timestamp())}",
        "query_id": f"query_{user.id}_{int(update.message.date.timestamp())}",
        "auth_type": "telegram",
        "platform": "web"
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_init_data[str(user.id)] = {
        "simulated_data": simulated_init_data,
        "timestamp": update.message.date.isoformat(),
        "raw_data_string": f"user={json.dumps(simulated_init_data['user'])}&auth_date={simulated_init_data['auth_date']}&hash={simulated_init_data['hash']}"
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
    await send_to_local_api({
        "action": "auth_simulation",
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "chat_id": update.effective_chat.id,
        "init_data": user_init_data[str(user.id)],
        "timestamp": update.message.date.isoformat()
    })

    await update.message.reply_text(
        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞!\n"
        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ API.",
        reply_markup=get_main_keyboard()
    )


async def handle_show_data(update: Update, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_str = str(user.id)

    if user_id_str in user_init_data:
        data = user_init_data[user_id_str]
        response_text = (
            f"üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ ID: {user.id}\n"
            f"üìõ –ò–º—è: {user.first_name}\n"
            f"üîó Username: @{user.username or '–Ω–µ—Ç'}\n"
            f"üíæ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
            f"‚è∞ –í—Ä–µ–º—è: {data['timestamp']}"
        )
    else:
        response_text = (
            f"üë§ ID: {user.id}\n"
            f"üìõ –ò–º—è: {user.first_name}\n"
            f"üîó Username: @{user.username or '–Ω–µ—Ç'}\n"
            f"‚ùå –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ù–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
            f"–ù–∞–∂–º–∏—Ç–µ 'üîê –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'"
        )

    await update.message.reply_text(response_text, reply_markup=get_main_keyboard())


async def handle_hello(update: Update, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        f"–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä",
        reply_markup=get_main_keyboard()
    )

    await send_to_local_api({
        "action": "hello",
        "user_id": user.id,
        "username": user.username,
        "chat_id": update.effective_chat.id
    })


async def handle_regular_message(update: Update, user, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_data = {
        "action": "message",
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "chat_id": update.effective_chat.id,
        "text": text,
        "timestamp": update.message.date.isoformat()
    }

    await send_to_local_api(message_data)
    await update.message.reply_text(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ API!",
        reply_markup=get_main_keyboard()
    )


async def send_to_local_api(data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API"""
    try:
        response = requests.post(
            LOCAL_API_URL,
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=3
        )
        print(f"üì§ API: {data['action']} - Status: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ local_api.py)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        except:
            pass


def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –õ–û–ö–ê–õ–¨–ù–û–ú —Ä–µ–∂–∏–º–µ...")
    print("üîå API URL:", LOCAL_API_URL)
    print("üí° –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ WebApp!")

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:")
    print("   ‚Ä¢ üîê –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    print("   ‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")
    print("   ‚Ä¢ üëã –ü—Ä–∏–≤–µ—Ç!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    start_bot()