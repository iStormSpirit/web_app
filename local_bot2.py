import logging
import requests
from telegram import Update, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import urllib.parse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
BOT_TOKEN = "8222846517:AAEVXzNlrt14BWIK2QrA38JE72doZ2Fy3YE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
LOCAL_API_URL = "http://localhost:8000/api"  # –õ–æ–∫–∞–ª—å–Ω—ã–π API
LOCAL_WEBAPP_URL = "http://localhost:8080/webapp.html"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", web_app=WebAppInfo(url=LOCAL_WEBAPP_URL))]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram Web App.\n"
        "–í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä."
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API
    user_data = {
        "action": "start_command",
        "user_id": update.effective_user.id,
        "username": update.effective_user.username,
        "first_name": update.effective_user.first_name,
        "last_name": update.effective_user.last_name,
        "chat_id": update.effective_chat.id
    }

    await send_to_local_api(user_data)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message = update.message

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –±–æ—Ç–∞
    print("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(f"üë§ User: {user.first_name} (@{user.username})")
    print(f"üÜî ID: {user.id}")
    print(f"üí¨ Text: {message.text}")
    print(f"üìã Chat ID: {message.chat_id}")
    print("-" * 40)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ API
    message_data = {
        "action": "message",
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "chat_id": message.chat_id,
        "message_id": message.message_id,
        "text": message.text,
        "date": message.date.isoformat()
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API
    await send_to_local_api(message_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply_text(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä!",
        reply_markup=get_main_keyboard()
    )


async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    web_app_data = update.effective_message.web_app_data

    print("üéØ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App:")
    print(f"Data: {web_app_data.data}")
    print("-" * 40)

    # –ü–∞—Ä—Å–∏–º initData
    try:
        init_data = parse_init_data(web_app_data.data)

        webapp_data = {
            "action": "webapp_auth",
            "init_data": init_data,
            "raw_data": web_app_data.data,
            "user_id": update.effective_user.id,
            "chat_id": update.effective_chat.id
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API
        await send_to_local_api(webapp_data)

        await update.message.reply_text(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp data: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")


def parse_init_data(raw_data: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç initData –∏–∑ query string –≤ —Å–ª–æ–≤–∞—Ä—å"""
    result = {}
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å—Ç—Ä–æ–∫—É
        decoded_data = urllib.parse.unquote(raw_data)
        for pair in decoded_data.split('&'):
            if '=' in pair:
                key, value = pair.split('=', 1)
                result[key] = value

        # –ï—Å–ª–∏ –µ—Å—Ç—å user –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if 'user' in result:
            try:
                result['user'] = json.loads(result['user'])
            except:
                pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData: {e}")
        result = {"raw": raw_data, "error": str(e)}

    return result


async def send_to_local_api(data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API"""
    try:
        response = requests.post(
            LOCAL_API_URL,
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=5
        )

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API: {data['action']}")
        print(f"üì° Status Code: {response.status_code}")
        if response.text:
            print(f"üìã Response: {response.text}")
        print("=" * 50)

    except requests.exceptions.ConnectionError:
        print("‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ local_api.py")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass


def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print(f"üåê WebApp URL: {LOCAL_WEBAPP_URL}")
    print(f"üîå API URL: {LOCAL_API_URL}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)