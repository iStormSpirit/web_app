from http.server import HTTPServer, BaseHTTPRequestHandler
import json
from urllib.parse import urlparse, parse_qs, unquote
import pprint

from anyio import typed_attribute


def parse_init_data(init_data_string):
    """
    –ü–∞—Ä—Å–∏—Ç initData —Å—Ç—Ä–æ–∫—É –∏–∑ Telegram –≤ JSON –æ–±—ä–µ–∫—Ç
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å—Ç—Ä–æ–∫—É
        decoded = unquote(init_data_string)

        # –ü–∞—Ä—Å–∏–º query string
        parsed_data = parse_qs(decoded)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        result = {}
        for key, value in parsed_data.items():
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if isinstance(value, list) and len(value) == 1:
                result[key] = value[0]
            else:
                result[key] = value

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –ø–æ–ª—è (user, receiver, chat)
        json_fields = ['user', 'receiver', 'chat']
        for field in json_fields:
            if field in result:
                try:
                    result[field] = json.loads(result[field])
                except (json.JSONDecodeError, TypeError):
                    # –ï—Å–ª–∏ –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    pass

        return result

    except Exception as e:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        return {
            "error": str(e),
            "raw_string": init_data_string,
            "decoded_string": decoded if 'decoded' in locals() else None
        }

class LocalAPIHandler(BaseHTTPRequestHandler):

    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/api':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)

            try:
                data = json.loads(post_data.decode('utf-8'))
                self.handle_api_data(data)
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"üì¶ Raw data: {post_data.decode('utf-8')}")
                self.send_error(400, "Invalid JSON")

        else:
            self.send_error(404, "Not Found")

    def handle_api_data(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üöÄ –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ –ë–û–¢–ê:")
        print("=" * 80)

        action = data.get('action', 'unknown')
        print(f"üìã Action: {action}")

        # –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï:")
        print("-" * 40)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pprint –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        pp = pprint.PrettyPrinter(indent=2, width=100)

        # sup_data = parse_init_data(data)
        print(type(data))
        print(data)
        # pp.pprint(data)

        print("-" * 40)

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'start_command':
            print(f"\nüë§ User: {data.get('first_name')} (@{data.get('username')})")
            print(f"üÜî User ID: {data.get('user_id')}")
            print(f"üí¨ Chat ID: {data.get('chat_id')}")

        elif action == 'message':
            print(f"\nüë§ User: {data.get('first_name')} (@{data.get('username')})")
            print(f"üí¨ Message: {data.get('text')}")
            print(f"üìÖ Date: {data.get('date')}")

        elif action == 'auth_simulation':
            print("\nüéØ IMITATED AUTH DATA:")
            init_data = data.get('init_data', {})
            if 'simulated_data' in init_data:
                sim_data = init_data['simulated_data']
                print(f"üë§ User: {sim_data.get('user', {}).get('first_name', 'N/A')}")
                print(f"üÜî User ID: {sim_data.get('user', {}).get('id', 'N/A')}")
                print(f"üîê Hash: {sim_data.get('hash', 'N/A')}")

            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é initData —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            print("\nüìã FULL INITDATA STRUCTURE:")
            print("-" * 30)
            if 'init_data' in data:
                pp.pprint(data['init_data'])

        elif action == 'webapp_auth':
            print("\nüéØ WEB APP AUTHORIZATION DATA:")
            init_data = data.get('init_data', {})

            # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'raw_data' in init_data:
                print(f"üì¶ Raw initData: {init_data['raw_data']}")

            # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'parsed_data' in init_data:
                print("\nüîç PARSED INITDATA:")
                print("-" * 25)
                pp.pprint(init_data['parsed_data'])

            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            if 'parsed_data' in init_data and 'user' in init_data['parsed_data']:
                user_data = init_data['parsed_data']['user']
                if isinstance(user_data, dict):
                    print(f"\nüë§ User: {user_data.get('first_name', '')} {user_data.get('last_name', '')}")
                    print(f"üìß Username: @{user_data.get('username', 'N/A')}")
                    print(f"üÜî User ID: {user_data.get('id', 'N/A')}")

        print("\n" + "=" * 80)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        response = {"status": "success", "received": True}
        self.write_json(response)

    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã)"""
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b"""
                <h1>Local API Server is Running!</h1>
                <p>API endpoint: <code>/api</code></p>
                <p>Check console for incoming data from bot</p>
            """)
        elif self.path == '/status':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.write_json({"status": "running", "port": 8000})
        else:
            self.send_error(404, "Not Found")

    def write_json(self, data):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON"""
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))

    def log_message(self, format, *args):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"üåê API Request: {self.address_string()} - {format % args}")

    def log_request(self, code='-', size='-'):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path != '/':
            print(f"üì° {self.command} {self.path} - {code}")


def run_api_server():
    """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞"""
    server_address = ('localhost', 8000)
    httpd = HTTPServer(server_address, LocalAPIHandler)

    print(f"üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print(f"üì° API endpoint: http://localhost:8000/api")
    print(f"üîç Status check: http://localhost:8000/status")
    print("=" * 60)
    print("–û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞...")
    print("=" * 60)

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")


if __name__ == "__main__":
    run_api_server()