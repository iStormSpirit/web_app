import logging
import requests
from telegram import Update, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
from urllib.parse import urlparse, parse_qs
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ò–°–ü–û–õ–¨–ó–£–ï–ú –õ–û–ö–ê–õ–¨–ù–´–ô –°–ï–†–í–ï–†!
BOT_TOKEN = "8222846517:AAEVXzNlrt14BWIK2QrA38JE72doZ2Fy3YE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
LOCAL_API_URL = "http://localhost:8000/api"
LOCAL_WEBAPP_URL = "http://localhost:8080/webapp.html"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è initData
user_init_data = {}


def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    keyboard = [
        [KeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", web_app=WebAppInfo(url=LOCAL_WEBAPP_URL))],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ WebApp.\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

    await send_to_local_api({
        "action": "start_command",
        "user_id": update.effective_user.id,
        "username": update.effective_user.username,
        "first_name": update.effective_user.first_name,
        "chat_id": update.effective_chat.id
    })


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message = update.message

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"
    if message.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        if str(user.id) in user_init_data:
            data = user_init_data[str(user.id)]
            response_text = (
                f"üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                f"üë§ ID: {user.id}\n"
                f"üìõ –ò–º—è: {user.first_name}\n"
                f"üîó Username: @{user.username or '–Ω–µ—Ç'}\n"
                f"üíæ InitData —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –î–∞"
            )
        else:
            response_text = "‚ùå –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'."

        await message.reply_text(response_text, reply_markup=get_main_keyboard())
        return

    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("üì® –°–æ–æ–±—â–µ–Ω–∏–µ:", message.text)

    message_data = {
        "action": "message",
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "chat_id": message.chat_id,
        "text": message.text,
        "timestamp": message.date.isoformat()
    }

    await send_to_local_api(message_data)
    await message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!", reply_markup=get_main_keyboard())


async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    try:
        web_app_data = update.effective_message.web_app_data
        user_id = update.effective_user.id

        print("üéØ WebApp –¥–∞–Ω–Ω—ã–µ:", web_app_data.data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_init_data[str(user_id)] = {
            "raw_data": web_app_data.data,
            "parsed_data": parse_init_data(web_app_data.data),
            "timestamp": update.message.date.isoformat()
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
        await send_to_local_api({
            "action": "webapp_auth",
            "user_id": user_id,
            "init_data": user_init_data[str(user_id)],
            "chat_id": update.effective_chat.id
        })

        await update.message.reply_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ!",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebApp: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


def parse_init_data(raw_data: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç initData"""
    result = {"raw": raw_data}
    try:
        if 'user=' in raw_data:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            parts = raw_data.split('&')
            for part in parts:
                if '=' in part:
                    key, value = part.split('=', 1)
                    result[key] = value
                    if key == 'user':
                        try:
                            result['user_obj'] = json.loads(value)
                        except:
                            pass
    except Exception as e:
        result["error"] = str(e)
    return result


async def send_to_local_api(data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π API"""
    try:
        response = requests.post(
            LOCAL_API_URL,
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=3
        )
        print(f"üì§ API: {data['action']} - Status: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ local_api.py)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")


def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –õ–û–ö–ê–õ–¨–ù–û–ú —Ä–µ–∂–∏–º–µ...")
    print("üìç WebApp URL:", LOCAL_WEBAPP_URL)
    print("üîå API URL:", LOCAL_API_URL)
    print("üí° –°–æ–≤–µ—Ç: –ó–∞–ø—É—Å—Ç–∏—Ç–µ local_api.py –∏ local_web_server.py")

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    application.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    start_bot()